package com.elyzar.play.functional;

import com.elyzar.play.support.domain.farm.Animal;
import com.elyzar.play.support.domain.farm.Dog;
import com.google.common.util.concurrent.Uninterruptibles;

import java.util.List;
import java.util.UUID;
import java.util.concurrent.TimeUnit;
import java.util.function.Supplier;
import java.util.stream.Collectors;
import java.util.stream.Stream;

// Supplier<T> | () -> T  | get() | BooleanSupplier, IntSupplier, LongSupplier, DoubleSupplier
public class SupplierExamples {

    public static void main(String[] args) {

        supplierCreatesNewInstance();
        supplierSleepsAndReturnsSquaredValue(9d);
        generateStreamOfRandomUUID(10, 5).forEach(System.out::println);
        System.out.println("------------------------------");
    }

    private static void supplierSleepsAndReturnsSquaredValue(Double d) {
        Double valueSquared = Math.pow(createLazySupplier(d).get(), 2);
        System.out.println(String.format("The value squared of a value %f generated by a supplier is %f ",d, valueSquared));
        System.out.println("------------------------------");
    }

    private static void supplierCreatesNewInstance() {
        Supplier<Animal> dogSupplier = Dog::new;
        Animal newDog = dogSupplier.get();
        System.out.println("a dog was supplied without a name: "+newDog.getName());
        System.out.println("------------------------------");
    }

    private static List<UUID> generateStreamOfRandomUUID(int from, int limit) {
        System.out.println("Generating a stream of random UUIDs using a UUID random supplier");
        Supplier<UUID> randomUUIDSupplier = UUID::randomUUID;
        Stream<UUID> infiniteStreamOfRandomUUID = Stream.generate(randomUUIDSupplier);
        List<UUID> randomInts = infiniteStreamOfRandomUUID
                .skip(from)
                .limit(limit)
                .collect(Collectors.toList());
        return randomInts;
    }

    private static Supplier<Double> createLazySupplier(Double d) {
        Supplier<Double> lazyValueSupplier = () -> {
            Uninterruptibles.sleepUninterruptibly(1000, TimeUnit.MILLISECONDS);
            return d;
        };
        return lazyValueSupplier;
    }
}
